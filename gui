#!/usr/bin/env python

import signal, socket
from gi.repository import GObject, Gtk, GLib, Pango, Soup

class FileShareUI (Gtk.Window):
    def __init__ (self):
        Gtk.Window.__init__ (self, title="fileshare-ui")

        self.port = 0;

        self.set_default_size (400, 200)

        hbox = Gtk.HBox (spacing=6)
        self.add (hbox)

        vbox = Gtk.VBox (spacing=12)
        hbox.pack_start (vbox, True, False, 0)

        self.share_button = Gtk.Button ()
        self.share_button.connect ("clicked", self.on_button_clicked)
        vbox.pack_start(self.share_button, False, False, 0)

        self.sharing_label = Gtk.Label ("")
        self.sharing_label.set_ellipsize (Pango.EllipsizeMode.END)
        vbox.pack_start (self.sharing_label, False, False, 0)

        self.address_label = Gtk.Label ("")
        self.address_label.set_selectable (True)
        vbox.pack_start (self.address_label, False, False, 0)

        self.info_label = Gtk.Label ("")
        vbox.pack_start (self.info_label, False, False, 0)

        self.shared_file = None
        self.update_ui()

        #testing
        self.port = 55555;
        self.start_sharing ("/home/jku/temporaomore")


    # Utility function to guess the IP (as a string) where the server can be
    # reached from the outside. Quite nasty problem actually.
    # Copied from http://www.home.unix-ag.org/simon/woof, GPL 2+

    def find_ip (self):
        # we get a UDP-socket for the TEST-networks reserved by IANA.
        # It is highly unlikely, that there is special routing used
        # for these networks, hence the socket later should give us
        # the ip address of the default route.
        # We're doing multiple tests, to guard against the computer being
        # part of a test installation.

        candidates = []
        for test_ip in ["192.0.2.0", "198.51.100.0", "203.0.113.0"]:
            s = socket.socket (socket.AF_INET, socket.SOCK_DGRAM)
            s.connect ((test_ip, 80))
            ip_addr = s.getsockname ()[0]
            s.close ()
            if ip_addr in candidates:
                return ip_addr
            candidates.append (ip_addr)

        return candidates[0]


    def update_ui (self):
        if (self.shared_file == None):
            self.share_button.set_label ("Share a file")
            self.sharing_label.set_text ("Currently not sharing anything.")
            self.address_label.set_text ("")
            self.info_label.set_text ("")
        else:
            self.share_button.set_label ("Stop sharing")
            self.sharing_label.set_text ("Now Sharing '{}' at".format (GLib.path_get_basename (self.shared_file)))
            self.address_label.set_text ("{}:{}".format (self.local_ip, self.port))
            if (self.request_count == 0):
                self.info_label.set_text ("It has not been downloaded yet.")
            elif (self.request_finished_count == 0):
                self.info_label.set_text ("It is being downloaded now.")
            elif (self.request_finished_count == self.request_count):
                if (self.request_finished_count == 1):
                    self.info_label.set_text ("It has been downloaded once.")
                else:
                    self.info_label.set_text ("It has been downloaded {} times.".format (self.request_finished_count))
            else:
                if (self.request_finished_count == 1):
                    self.info_label.set_text ("It is being downloaded now and has been downloaded once already.")
                else:
                    self.info_label.set_text ("It is being downloaded now and has been downloaded {} times already.".format (self.request_finished_count))

    def on_soup_request (self, server, message, path, query, client, wtf_is_this):
        if (message.method != "GET"):
            message.set_status (Soup.KnownStatusCode.METHOD_NOT_ALLOWED)
            print "request: not allowed"
            return 

        content = GLib.file_get_contents (self.shared_file)[1]
        if (content == None):
            message.set_status (Soup.KnownStatusCode.INTERNAL_SERVER_ERROR)
            print "request: internal error"
            return 

        message.response_body.append_buffer (Soup.Buffer.new (content))

        self.request_count += 1
        self.update_ui ()
        print "request: ok"
        message.set_status (Soup.KnownStatusCode.OK)


    def on_soup_request_finished (self, server, message, client):
        self.request_finished_count += 1
        self.update_ui ()
        print "request: finished"


    def start_sharing (self, filename):
        self.shared_file = filename 
        self.local_ip = self.find_ip ()
        self.request_count = 0
        self.request_finished_count = 0

        self.server = GObject.new (Soup.Server, port=self.port)
        if (self.server == None):
            print "Failed to start server"
            return

        self.server.add_handler (None, self.on_soup_request, None)
        self.server.connect ("request-finished", self.on_soup_request_finished)

        print "Server starting, guessed address {}:{}".format(self.local_ip, self.server.get_port ())
        self.server.run_async ()

        self.update_ui()


    def stop_sharing (self):
            self.shared_file = None

            self.server.quit()
            self.server = None

            self.update_ui()

    def on_button_clicked (self, widget):
        if (self.shared_file != None):
            self.stop_sharing ()
        else:
            dialog = Gtk.FileChooserDialog ("Pick a file to share", self,
                                            Gtk.FileChooserAction.OPEN,
                                            (Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL,
                                             Gtk.STOCK_OPEN, Gtk.ResponseType.OK))

            response = dialog.run()
            if (response == Gtk.ResponseType.OK):
                self.start_sharing (dialog.get_filename ())

            dialog.destroy()



win = FileShareUI ()
win.connect ("delete-event", Gtk.main_quit)
win.show_all ()

signal.signal(signal.SIGINT, signal.SIG_DFL)
Gtk.main ()
